User will sign in to database with table created in mysql with following columns:
+--------------------+--------------+------+-----+---------+----------------+
| Field              | Type         | Null | Key | Default | Extra          |
+--------------------+--------------+------+-----+---------+----------------+
| Id                 | int(11)      | NO   | PRI | NULL    | auto_increment |
| Username           | varchar(255) | NO   |     | NULL    |                |
| Password           | varchar(255) | NO   |     | NULL    |                |
| Email              | varchar(255) | YES  |     | NULL    |                |
| ModelsProvider     | varchar(255) | YES  |     | NULL    |                |
| FirstName          | varchar(255) | YES  |     | NULL    |                |
| LastName           | varchar(255) | YES  |     | NULL    |                |
| AccessRightsSdo    | varchar(255) | YES  |     | NULL    |                |
| AccessRightsVendor | varchar(255) | YES  |     | NULL    |                |
+--------------------+--------------+------+-----+---------+----------------+

Once he is singed in he can do PUT request on path http://yangcatalog.org/platforms
with body example:
{
  "platforms": [
       {
         "vendor": "cisco",
         "name": "NX-OSv",
         "capabilities_file":{
            "repository": "yang",
            "owner": "miroslavKovacPantheon",
            "path": "vendor/cisco/xe/1641/cat3k-netconf-capability.xml"
        },
         "models": [
                     "N9K-NXOSV"
         ],
         "software-flavor": "ALL",
         "software-version": "1641",
         "os-type": "NX-OS"
       }
     ]
}
Authorization will be checked for username password and if this specific user
can write to a specific branch according to AccessRights column which starts with '/' and continue according to
yang-catalog.yang vendors branch. For example: '/', '/cisco', '/cisco/NX-OSv/1641/ALL'

If user didn`t pass authentication, 401 unauthorized will be sent. Otherwise github GET request with body
https://api.github.com/repos/miroslavKovacPantheon/yang/contents/vendor/cisco/xe/1641
for this example will follow. This will give us list of metadata for each file contained in that specific directory,
like name of file, download_url with raw file, type whether it is folder or file. If it is file with suffix '.yang'
we will create a file with its filename in temp directory. If it is folder we will recursively find files in those
folders. Hello message xml file and json request is also contained in that temporary folder.

When we have all the files we call our populate script which will parse and populate the yangcatalog.org database.


Another use case is SDOs. Once person is singed in he can do PUT request on path http://yangcatalog.org/modules
with body example:
{
      "modules": {
         "module":[
       {
         "conformance-type": "implement",
         "maturity-level": "ratified",
         "author-email": "miroslav.kovac@pantheon.tech",
         "sdo-file":{
             "repo": "yang",
             "owner": "miroslavKovacPantheon",
             "path": "standard/ietf/DRAFT/example-jukebox.yang"
         }
       },
       {
         "conformance-type": "foo",
         "maturity-level": "bar",
         "author-email": "foo@bar.com",
         "sdo-file":{
             "repo": "foo",
             "owner": "bar",
             "path": "<PATH to yang file>"
         }
       }
     ]
   }
 }

We are providing a parsing of a module but there are some metadata that need to provided cause we are unable to get them
out of a module. The following metadata need to be provided:
    1, conformance-type
    2, maturity level
    3, author-email
    4, reference
    5, document-name

If these metadata are missing, except conformance-type which is mandatory to have, they will simply not be included in
yangcatalog and all metadata that could be parsed from module will populate yangcatalog.

Authorization is done the same way as with vendor use case