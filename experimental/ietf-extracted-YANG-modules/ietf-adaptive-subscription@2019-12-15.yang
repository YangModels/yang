module ietf-adaptive-subscription {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-adaptive-subscription";
  prefix as;
  import ietf-subscribed-notifications {
    prefix sn;
  }
  import ietf-yang-push {
    prefix yp;
  }
  import ietf-yang-types {
    prefix yang;
  }
  organization
    "IETF NETCONF (Network Configuration) Working Group";
  contact
    "";
  description
    "NETCONF Protocol Data Types and Protocol Operations.
     Copyright (c) 2020 IETF Trust and the persons identified as
     the document authors.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC xxxx; see
     the RFC itself for full legal notices.";

  revision 2019-12-15 {
    description
      "Initial revision";
    reference
      "RFCxxx Adaptive subscription to YANG notification.";
  }

  typedef centiseconds {
       type uint32;
       description
         "A period of time, measured in units of 0.01 seconds.";
     }
  typedef operator {
    type enumeration {
      enum unequal {
        description
          "Indicates that the comparision type is unequal to.";
      }
      enum equal {
        description
          "Indicates that the comparision type is equal to.";
      }
      enum less {
        description
          "Indicates that the comparision type is less than.";
      }
      enum less-or-equal {
        description
          "Indicates that the comparision type is less than
           or equal to.";
      }
      enum greater {
        description
          "Indicates that the comparision type is greater than.";
      }
      enum greater-or-equal {
        description
          "Indicates that the comparision type is greater than
           or equal to.";
      }
    }
    description
      "definition of the operator";
  }
  augment "/sn:subscriptions/sn:subscription/yp:update-trigger" {
         description
         "This augmentation adds additional subscription parameters
          that apply specifically to adaptive subscription.";
    case adaptive-period {
      container adaptive-periods {
        list adaptive-period {
          key "id";
          leaf id {
            type string;
            description
              "identifier";
          }
          leaf op-field {
            type yang:xpath1.0;
            description
              "targeted objects";
          }
          leaf op-value {
            type string;
            description
              "Compartion value which is static threshold value.";
          }
          leaf operator {
            type operator;
            description
              "Comparison type.";
          }
         leaf interval {
            type centiseconds;
            mandatory true;
            description
              "Duration of time that should occur between periodic
               push updates, in units of 0.01 seconds.";
        }
        leaf anchor-time {
             type yang:date-and-time;
             description
               "Designates a timestamp before or after which a series
                of periodic push updates are determined.  The next
               update will take place at a point in time that is a
               multiple of a period from the 'anchor-time'.
               If an anchor-time is not provided, then the anchor-time
               MUST be set with the creation time of the initial
               update record. ";
             }
        description
          "List for adaptive periods";
      }
          description
             "Container for adaptive periods.";
    }
  }
 }
}
