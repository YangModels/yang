module ietf-bmp {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-bmp";
  prefix ietf-bmp;

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-routing {
    prefix rt;
    reference
      "RFC 8349, A YANG Data Model for Routing Management
       (NMDA Version).";
  }
  import ietf-bgp-types {
    prefix bt;
    reference
      "RFC XXXX, BGP YANG Model for Service Provider Network.";
  }
  import ietf-bgp {
    prefix bgp;
    reference
      "RFC XXXX: BGP YANG module for Service Provider Network.";
  }

  organization
    "IETF GROW Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/grow/>
     WG List:  <mailto:grow@ietf.org>

     Author:  Camilo Cardona
        <mailto:camilo@ntt.net>

     Author:  Paolo Lucente
        <mailto:cpaolo@ntt.net>

     Author:  Thomas Graf
        <mailto:thomas.graf@swisscom.com>

     Author:  Benoit Claise
        <mailto:benoit.claise@huawei.com>";
  description
    "This module specifies a structure for BMP
     (BGP Monitoring Protocol) configuration and monitoring.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.
     Copyright (c) 2022 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Revised BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9196
     (https://www.rfc-editor.org/info/rfc9196); see the RFC itself
     for full legal notices.";

  revision 2022-01-27 {
    description
      "initial version";
    reference
      "[RFC-to-be]: BMP YANG Module";
  }

  typedef bmp_peer_types {
    type enumeration {
      enum all_peers {
        value 10;
        description
          "Selects all peers";
      }
    }
    description
      "Enum values for peer selection specific for BMP";
  }

  grouping bmp_ip_connection {
    description
      "common elements for defining connectivity
       to a bmp station";
    leaf destination-address {
      type inet:ip-address;
      mandatory true;
      description
        "Destination IP address of station";
    }
    leaf local-address {
      type inet:ip-address;
      description
        "Local IP address to source connections";
    }
    leaf destination-port {
      type inet:ip-address;
      description
        "Destination port for connections";
    }
  }

  grouping bmp_peer_ribs_filter {
    description
      "Leaves for configuring RIBs where
       origin/destination peers are well defined.";
    leaf enabled {
      type boolean;
      description
        "Enables the specified RIB";
    }
    container address-families {
      description
        "container for lists of address-families";
      list address-family {
        key "name";
        description
          "List of address families.
           The name of the address family, as defined
           in the BGP model is used for keying.";
        leaf name {
          type leafref {
            path "/rt:routing/rt:control-plane-protocols/"
               + "rt:control-plane-protocol/bgp:bgp/"
               + "bgp:global/bgp:afi-safis/bgp:afi-safi/bgp:name";
          }
          description
            "Name of the address family";
        }
        leaf-list peers {
          type union {
            type leafref {
              path "/rt:routing/rt:control-plane-protocols/"
                 + "rt:control-plane-protocol/bgp:bgp/"
                 + "bgp:neighbors/bgp:neighbor/bgp:remote-address";
            }
            type bt:peer-type;
            type bmp_peer_types;
          }
          description
            "Peers can be identified by a remote-address,
             or by a enum value corresponding to groups of peers.
             This way an operator can select all external peers,
             all internal peers, or all peers.";
        }
      }
    }
  }

  grouping bmp_route_monitoring_sources {
    description
      "";
    container adj-rib-in-pre {
      description
        "Configuration for the adj-rib-in pre-policy";
      uses bmp_peer_ribs_filter;
    }
    container adj-rib-in-post {
      description
        "Configuration for the adj-rib-in post-policy";
      uses bmp_peer_ribs_filter;
    }
    container local-rib {
      description
        "Configuration for the local-rib";
      leaf enabled {
        type boolean;
        description
          "Enables the specified RIB";
      }
      leaf-list address-families {
        type identityref {
          base bt:afi-safi-type;
        }
        description
          "List of address families to enable for
           local-rib.";
      }
    }
    container adj-rib-out-pre {
      description
        "Configuration for the adj-rib-out pre-policy";
      uses bmp_peer_ribs_filter;
    }
    container adj-rib-out-post {
      description
        "Configuration for the adj-rib-out post-policy";
      uses bmp_peer_ribs_filter;
    }
  }

  grouping bmp_session_options {
    description
      "leaves for configuration of the bmp session";
    leaf initiation-message {
      type string;
      description
        "User defined message to append to the
         initiation message";
    }
    leaf statistics-interval {
      type uint32;
      description
        "Default Interval for statistic message.";
    }
  }

  container bmp {
    description
      "Main level for BMP configuration ";
    container stations {
      description
        "Container for the list of BMP stations";
      list station {
        key "id";
        description
          "Configuration for BMP stations.";
        leaf id {
          type string;
          description
            "Identification string for the station";
        }
        // Connection, missing tcp tuning params
        // like keep-alives, segment sizes, etc.
        container connection {
          description
            "Connection details for the station";
          uses bmp_ip_connection;
        }
        container bmp_session {
          description
            "BMP session options for the station";
          uses bmp_session_options;
        }
        container bmp_sources {
          description
            "Configuration of the data sources for the station";
          uses bmp_route_monitoring_sources;
        }
        container session-stats {
          description
            "stats and operational values for the station";
          leaf established-session {
            type boolean;
            config false;
            description
              "Value indicating if the session is currently
               established";
          }
          leaf total-route-monitoring-messages {
            type uint32;
            config false;
            description
              "Number of route-monitoring messages sent since last
               successful connection";
          }
          leaf total-statistics-messages {
            type uint32;
            config false;
            description
              "Number of statistics messages sent since last
               successful connection";
          }
          leaf total-peer-down-messages {
            type uint32;
            config false;
            description
              "Number of peer-down messages sent since last
               successful connection";
          }
          leaf total-peer-up-messages {
            type uint32;
            config false;
            description
              "Number of peer-up messages sent since last successful
               connection";
          }
          leaf total-initiation-messages {
            type uint32;
            config false;
            description
              "Number of initiation messages sent since last
               successful connection";
          }
          leaf total-route-mirroring-messages {
            type uint32;
            config false;
            description
              "Number of route-mirroring messages sent since last
               successful connection";
          }
        }
      }
    }
    container actions {
      description
        "Container with the actions for the BMP operation";
      action session-reset {
        description
          "Resets the session for a station.";
        input {
          leaf station {
            type leafref {
              path "/bmp/stations/station/id";
            }
            description
              "Identifies the station to reset";
          }
        }
        output {
          choice outcome {
            description
              "Output of the reset operation. Either a success or
               failure. For the latter, the reason for the
               error is provided.";
            leaf success {
              type empty;
              description
                "Reset successful";
            }
            leaf failure {
              type string;
              description
                "Reset could not be performed.
                Reason is included in the field";
            }
          }
        }
      }
    }
  }
}
