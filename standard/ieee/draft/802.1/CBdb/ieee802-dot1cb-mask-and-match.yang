module ieee802-dot1cb-mask-and-match {
  yang-version 1.1;
  namespace "urn:ieee:std:802.1Q:yang:ieee802-dot1cb-mask-and-match";
  prefix dot1cb-mm-str-id;

  import ieee802-dot1cb-stream-identification {
    prefix cb-str-id;
  }

//  import ieee802-dot1cb-stream-identification-types {
//    prefix dot1cb-str-id-types;
//  }

  import ietf-yang-types {
    prefix yang;
  }

  organization
    "Institute of Electrical and Electronics Engineers";
  contact
    "WG-URL: http://grouper.ieee.org/groups/802/1/
     WG-EMail: stds-802-1@ieee.org

     Contact: IEEE 802.1 Working Group Chair
     Postal: C/O IEEE 802.1 Working Group
            IEEE Standards Association
            445 Hoes Lane
            P.O. Box 1331
            Piscataway
            NJ 08855-1331
            USA

     E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG";

  description
    "Management objects that control the mask-and-match
	   stream identification function from IEEE Std. 802.1CBdb.
	   Augmentation to dot1cb-stream-identification-types module";

  revision 2020-02-21 {
    description
      "Initial Mask-and-match augmentation version";
    reference
      "Clause 9.1.6 of IEEE Std. 802.1CBdb Draft 0.5";
  }

  typedef uint48 {
    type uint64 {
      range "0..281474976710655";
    }
    description
      "48-bit unsigned integer.";
  }

  typedef msdu-mask-length-type {
    type uint16 {
      range "2..1024";
    }
    description
      "unsigned integer between 2 and 1024";
 }

/*------------------------------------------------
the identification-type in CBcv's YANG cannot be "augmented": could it be
changed into a "choice" or in some node that can be augmented, in case a vendor
wants to add its own Stream identification function (as mentioned in CB-2017) ?
-------------------------------------------------*/
/*
  augment "/cb-str-id:stream-identity-list/cb-str-id:identification-type" {
      type xxxx {

        enum mask-and-match-stream-identification {
          value 5;
          description
			"Mask-and-match Stream Identification";
        }

      }
  }
*/


  augment "/cb-str-id:stream-identity-list/cb-str-id:parameters" {
    container mask-and-match-stream-identification {
      uses mask-and-match-stream-identification-group;
      description
        "When instantiating an instance of the IP Stream
         identification function (6.7), the parameters in the
         following subclauses replace the tsnStreamIdParameters
         managed object (9.1.1.7).";
      reference
        "Clause 9.1.6 of IEEE Std. 802.1CBdb Draft 0.5";
    }
  }

  grouping mask-and-match-stream-identification-group {
    description
      "When instantiating an instance of the mask-and-match Stream
	   identification function (6.8), the parameters in the following
	   subclauses replace the tsnStreamIdParameters managed object
	   (9.1.1.7).";
    reference
        "Clause 9.1.6 of IEEE Std. 802.1CBdb Draft 0.5";
    leaf destination-mac-mask {
      type uint48;
      mandatory true;
      description
        "Specifies a 48-bit mask. A bitwise AND operation is performed between
		 destination-mac-mask and the destination_address_parameter passed by
		 the ISS indication primitive to the Mask-and-match Stream
		 identification function. The resulting 48-bit information is the
		 masked destination_address that is used as input for the instance of
		 the Mask-and-match Stream identification function. If destination-mac-mask
		 has a value of 0, the destination-address parameter is ignored.";
      reference
        "Clause 9.1.6.1 of IEEE Std. 802.1CBdb Draft 0.5";
	}
    leaf destination-mac-match {
	  when '../destination-mac-mask';
      type uint48;
      description
        "Specifies the 48-bit value of the masked destination_address, to be
		 matched by the instance of the Mask-and-match Stream identification
		 function.";
      reference
        "Clause 9.1.6.2 of IEEE Std. 802.1CBdb Draft 0.5";
    }
    leaf source-mac-mask {
      type uint48;
      mandatory true;
      description
        "Specifies a 48-bit mask. A bitwise AND operation is performed between
		 source-mac-mask and the source_address_parameter passed by the
		 ISS indication primitive to the Mask-and-match Stream identification
		 function. The resulting 48-bit information is the masked
		 source_address that is used as input for the instance of the
		 Mask-and-match Stream identification function. If source-mac-mask
		 has a value of 0, the source-address parameter is ignored.";
      reference
        "Clause 9.1.6.3 of IEEE Std. 802.1CBdb Draft 0.5";
    }
    leaf source-mac-match {
	  when '../source-mac-mask';
      type uint48;
      description
        "Specifies the 48-bit value of the masked source_address, to be
		 matched by the instance of the Mask-and-match Stream identification
		 function.";
      reference
        "Clause 9.1.6.4 of IEEE Std. 802.1CBdb Draft 0.5";
    }
/*--- this is a port-wide variable: does it have to be defined here ? ---*/
    leaf msdu-mask-max-length {
      type msdu-mask-length-type;
      mandatory true;
	  config false;
      description
        "read-only variable for the port the Mask-and-match Stream
		 identification function's instance is runing on. It is defined once
		 for all the instances of the Mask-and-match Stream identification
		 function invoked on that port. It is an integer value that specifies
		 the maximum value of the msdu-mask-length in bytes.
		 msdu-mask-max-length has a minimum value of 2";
      reference
        "Clause 9.1.6.5 of IEEE Std. 802.1CBdb Draft 0.5";
    }
    leaf msdu-mask-length {
	    must ". <= ../msdu-mask-max-length" {
        error-message
          "The MSDU mask length must be less or equal msdu-mask-max-length";
      }
	    type msdu-mask-length-type;
      mandatory true;
      description
        "Integer value that specifies the length of msdu-mask in bytes. It shall not
		     exceed the value specified by msdu-mask-max-length and has a minimum value
		     of 2";
      reference
        "Clause 9.1.6.6 of IEEE Std. 802.1CBdb Draft 0.5";
    }
    leaf msdu-mask {
	    type yang:hex-string {
        length "2 .. ../msdu-mask-length";
      }
      mandatory true;
      description
        "Specifies a mask of msdu-mask-length bytes. A bitwise AND operation is
		     performed between the msdu-mask-length first bytes of the
		     mac_service_data_unit parameter passed by the ISS indication primitive
	       to the Mask-and-match Stream identification function. The resulting
		     'msdu-mask-length'-byte information is the masked mac_service_data_unit
		     that is used as input for the instance of the Mask-and-match Stream
		     identification function. If masdu-mask has a value of 0, the
		     mac-service-data-unit parameter is ignored.";
      reference
        "Clause 9.1.6.7 of IEEE Std. 802.1CBdb Draft 0.5";
    }
    leaf msdu-match {
      when '../msdu-mask';
	    type yang:hex-string {
        length "2 .. ../msdu-mask-length";
      }
	    description
        "Specifies the 'msdu-mask-length'-byte value of the masked
		     mac_service_data_unit to be matched by the instance of the
		     Mask-and-match Stream identification function";
      reference
        "Clause 9.1.6.7 of IEEE Std. 802.1CBdb Draft 0.5";
    }
  }
}
