module ieee802-dot1cb-mask-and-match {
  yang-version 1.1;
  namespace "urn:ieee:std:802.1CB:yang:ieee802-dot1cb-mask-and-match";
  prefix dot1cb-mm-str-id;

  import ieee802-dot1cb-stream-identification {
    prefix cb-str-id;
  }

  import ietf-yang-types {
    prefix yang;
  }

  import ietf-interfaces {
    prefix if;
  }

  organization
    "Institute of Electrical and Electronics Engineers";
  contact
    "WG-URL: http://ieee802.org/1/
     WG-EMail: stds-802-1@ieee.org

     Contact: IEEE 802.1 Working Group Chair
     Postal: C/O IEEE 802.1 Working Group
            IEEE Standards Association
            445 Hoes Lane
            Piscataway, NJ 08854
            USA

     E-mail: stds-802-1-chairs@ieee.org";

  description
    "Management objects that control the mask-and-match
       stream identification function from IEEE Std 802.1CBdb.
       Augmentation to dot1cb-stream-identification-types module";

  revision 2020-12-16 {
    description
      "Published as part of IEEE Std 802.1CBdb.
       Initial version.";
	  reference
      "IEEE Std 802.1CBdb-2021";
  }

  typedef uint48 {
    type uint64 {
      range "0..281474976710655";
    }
    description
      "48-bit unsigned integer.";
  }

  typedef msdu-mask-length-type {
    type uint16 {
      range "2..2000";
    }
    description
      "unsigned integer between 2 and 2000";
 }

  typedef msdu-key-type {
      type yang:hex-string {
      length "2 .. 2000";
    }
    description
      "Hex string of length between 2 and 2000";
 }
  identity mask-and-match-stream-identification {
    base cb-str-id:strid-idty;
    description
      "Mask-and-match Stream Identification";
  }

  augment "/cb-str-id:stream-identity-list/cb-str-id:parameters" {
    when 'derived-from-or-self(/cb-str-id:stream-identity-list/cb-str-id:identification-type, "mask-and-match-stream-identification")';
    description
      "Augmentation of the Stream identitification types defined in the
      ieee802-dot1cb-stream-identification-types module with the
      mask-and-match Stream identification type";
    container mask-and-match-stream-identification {
      uses mask-and-match-stream-identification-group;
      description
        "When instantiating an instance of the mask-and-match
         identification function (6.8), the parameters in the
         following subclauses replace the tsnStreamIdParameters
         managed object (9.1.1.7).";
      reference
        "Clause 9.1.6 of IEEE Std 802.1CBdb";
    }
  }

  grouping mask-and-match-stream-identification-group {
    description
      "When instantiating an instance of the mask-and-match Stream
       identification function (6.8), the parameters in the following
       subclauses replace the tsnStreamIdParameters managed object
       (9.1.1.7).";
    reference
        "Clause 9.1.6 of IEEE Std 802.1CBdb";
    leaf destination-mac-mask {
      type uint48;
      description
        "Specifies a 48-bit mask. A bitwise AND operation is performed
         between destination-mac-mask and the
         destination_address_parameter passed by the ISS indication
         primitive to the Mask-and-match Stream identification
         function. The resulting 48-bit information is the masked
         destination_address that is used as input for the instance of
         the Mask-and-match Stream identification function. If
         destination-mac-mask has a value of 0, the destination-address
         parameter is ignored.";
      reference
        "Clause 9.1.6.1 of IEEE Std 802.1CBdb";
	}
    leaf destination-mac-match {
      when '../destination-mac-mask';
      type uint48;
      description
        "Specifies the 48-bit value of the masked destination_address,
         to be matched by the instance of the Mask-and-match Stream
         identification function.";
      reference
        "Clause 9.1.6.2 of IEEE Std 802.1CBdb";
    }
    leaf source-mac-mask {
      type uint48;
      description
        "Specifies a 48-bit mask. A bitwise AND operation is performed
         between source-mac-mask and the source_address_parameter
         passed by the ISS indication primitive to the Mask-and-match
         Stream identification function. The resulting 48-bit
         information is the masked source_address that is used as input
         for the instance of the Mask-and-match Stream identification
         function. If source-mac-mask has a value of 0, the
         source-address parameter is ignored.";
      reference
        "Clause 9.1.6.3 of IEEE Std 802.1CBdb";
    }
    leaf source-mac-match {
      when '../source-mac-mask';
      type uint48;
      description
        "Specifies the 48-bit value of the masked source_address, to be
         matched by the instance of the Mask-and-match Stream
         identification function.";
      reference
        "Clause 9.1.6.4 of IEEE Std 802.1CBdb";
    }
    leaf msdu-mask-length {
      type msdu-mask-length-type;
      description
        "Integer value that specifies the length, in octets, of
         tsnCpeMmIdMsduMask (9.1.6.6) and tsnCpeMmIdMsduMatch
         (9.1.6.7). The behavior of the Mask-and-match Stream
         identification function is undefined on any port where the
         value of tsnCpeMmIdMsduMaskLength exceeds the per-port
         mac_service_data_unit mask maximum length (9.4.1).
         tsnCpeMmIdMsduMaskLength has a minimum value of 2. If the
         length of the frame's mac_service_data_unit is shorter than
         tsnCpeMmIdMsduMaskLength, then the identification fails.";
      reference
        "Clause 9.1.6.5 of IEEE Std 802.1CBdb";
    }
    leaf msdu-mask {
      type msdu-key-type {
      length "2 .. max";
      }
       description
        "Specifies a mask of msdu-mask-length bytes. A bitwise AND
         operation is performed between the msdu-mask-length first
         bytes of the mac_service_data_unit parameter passed by the ISS
         indication primitive to the Mask-and-match Stream
         identification function. The resulting 'msdu-mask-length'-byte
         information is the masked mac_service_data_unit that is used
         as input for the instance of the Mask-and-match Stream
         identification function. If msdu-mask has a value of 0, the
         mac-service-data-unit parameter is ignored.";
      reference
        "Clause 9.1.6.6 of IEEE Std 802.1CBdb";
    }
    leaf msdu-match {
      when '../msdu-mask';
        type msdu-key-type {
        length "2 .. max";
      }
        description
        "Specifies the 'msdu-mask-length'-byte value of the masked
         mac_service_data_unit to be matched by the instance of the
         Mask-and-match Stream identification function";
      reference
        "Clause 9.1.6.7 of IEEE Std 802.1CBdb";
    }
  }
  list per-port-msdu-mask-max-length {
    key "port-name";
    description
      "Table of the per-port maximum msdu mask lengthts";
    reference
        "Clause 9.4.1 of IEEE Std 802.1CBdb";
    leaf port-name {
      type if:interface-ref;
      description
        "Identification of the port";
      reference
        "Clause 9.4.1 of IEEE Std 802.1CBdb";
    }
    leaf port-msdu-mask-max-length {
      type msdu-mask-length-type;
      config false;
      description
        "tsnPpMmIdMsduMaskMaxLength is a read-only variable defined for
         each port the Mask-and-match Stream identification function is
         to be ran on. It defines the maximum length a
         mac_service_data_unit mask can have. It is an integer value,
         in octets, with a minimum value of 2.";
      reference
        "Clause 9.4.1 of IEEE Std 802.1CBdb";
    }
  }
}
