module Cisco-IOS-XE-environment-oper {
  yang-version 1;
  namespace "http://cisco.com/ns/yang/Cisco-IOS-XE-environment-oper";
  prefix environment-ios-xe-oper;
  import tailf-common {
    prefix tailf;
  }
  import cisco-semver {
    prefix cisco-semver;
  }

  organization
    "Cisco Systems, Inc.";
  contact
    "Cisco Systems, Inc.
     Customer Service
     
     Postal: 170 W Tasman Drive
     San Jose, CA 95134
     
     Tel: +1 1800 553-NETS
     
     E-mail: cs-yang@cisco.com";
  description
    "This module contains a collection of YANG definitions
     for monitoring Environment of a Network Element.
     Copyright (c) 2016-2019 by Cisco Systems, Inc.
     All rights reserved.";

  revision 2019-05-01 {
    description
      "Added semantic version";
    reference "2.2.0";
    cisco-semver:module-version "2.2.0";
  }
  revision 2018-10-29 {
    description
      "- A new field sensor type is added
       - Cleaned up spelling errors in descriptions.";
    reference "2.1.0";
    cisco-semver:module-version "2.1.0";
  }
  revision 2017-11-27 {
    description
      "Sensor thresholds. RPMs as units. Changed enumeration names to be lowercase and hyphenated";
    reference "2.0.0";
    cisco-semver:module-version "2.0.0";
  }
  revision 2017-02-07 {
    description
      "Initial revision";
    reference "1.0.0";
    cisco-semver:module-version "1.0.0";
  }

  typedef sensor-type {
    type enumeration {
      enum "temperature" {
        value 0;
        tailf:code-name "ENUM_sensor_type_SENSOR_TYPE_TEMPERATURE";
      }
      enum "voltage" {
        value 1;
        tailf:code-name "ENUM_sensor_type_SENSOR_TYPE_VOLTAGE";
      }
      enum "current" {
        value 2;
        tailf:code-name "ENUM_sensor_type_SENSOR_TYPE_CURRENT";
      }
      enum "power" {
        value 3;
        tailf:code-name "ENUM_sensor_type_SENSOR_TYPE_POWER";
      }
      enum "fan" {
        value 4;
        tailf:code-name "ENUM_sensor_type_SENSOR_TYPE_FAN";
      }
      enum "unknown-sensor" {
        value 5;
        tailf:code-name "ENUM_sensor_type_SENSOR_TYPE_UNKNOWN";
      }
    }
    description
      "Type of the Sensor";
  }

  typedef sensor-units-type {
    type enumeration {
      enum "watts" {
        value 0;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_WATTS";
      }
      enum "celsius" {
        value 1;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_CELSIUS";
      }
      enum "millivolts" {
        value 2;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_MILLIVOLTS";
      }
      enum "amperes" {
        value 3;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_AMPERES";
      }
      enum "volts-dc" {
        value 4;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_VOLTS_DC";
      }
      enum "volts-ac" {
        value 5;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_VOLTS_AC";
      }
      enum "milliamperes" {
        value 6;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_MILLIAMPERES";
      }
      enum "unknown" {
        value 7;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_UNKNOWN";
      }
      enum "revolutions-per-minute" {
        value 8;
        tailf:code-name "ENUM_sensor_units_type_SENSOR_UNIT_RPMS";
      }
    }
    description
      "Units used by various sensors";
  }

  grouping sensor-name-loc-key {
    description
      "Each sensor representing a data node is 
       uniquely identified by a name and a location based key";
    leaf name {
      type string;
      description
        "Name of the sensor component.
         This includes all physical components of the chassis -
         both fixed and pluggable";
    }
    leaf location {
      type string;
      description
        "Sensor location";
    }
  }

  grouping sensor-params {
    description
      "Sensor parameters";
    leaf state {
      type string;
      description
        "A description of the current state of the sensor";
    }
    leaf current-reading {
      type uint32;
      description
        "Numerical value of the current sensor reading in sensor-units";
    }
    leaf sensor-units {
      type environment-ios-xe-oper:sensor-units-type;
      description
        "Units corresponding to the current-reading value";
    }
    leaf low-critical-threshold {
      type int32;
      description
        "Alarm threshold under which a critical
         alarm will be signalled";
    }
    leaf low-normal-threshold {
      type int32;
      description
        "No alarm above this threshold";
    }
    leaf high-normal-threshold {
      type int32;
      description
        "No alarm below this threshold";
    }
    leaf high-critical-threshold {
      type int32;
      description
        "Alarm threshold over which a critical 
         alarm will be signalled";
    }
    leaf sensor-name {
      type environment-ios-xe-oper:sensor-type;
      description
        "Name of the Sensor";
    }
  }

  container environment-sensors {
    config false;
    description
      "Data nodes for Environmental Monitoring";
    tailf:callpoint "ios-emul-oper-db";
    tailf:meta-data "callpoint" {
      tailf:meta-value "ios-emul-oper-db";
    }
    tailf:meta-data "greenprefix" {
      tailf:meta-value "/services;serviceName=ios_emul_oper";
    }
    tailf:meta-data "emulated" {
      tailf:meta-value "true";
    }
    list environment-sensor {
      key "name location";
      description
        "The list of components on the device chassis";
      uses environment-ios-xe-oper:sensor-params;
      uses environment-ios-xe-oper:sensor-name-loc-key;
    }
  }

  grouping __yangpp_metadata {
    description
      "Internal metadata for this module and imported modules";
    leaf json-metadata-leaf {
      type empty;
      description
        "Hidden internal leaf that holds this module's metadata";
      tailf:hidden "full";
      tailf:meta-data "compressed" {
        tailf:meta-value "QlpoMTFBWSZTWSnyBVEAAUTfgEAAEAYAEC+v3+q/r9+KMAFMLahppFGjT1NA0A00B6QHij1BoKbTSm1DRoGgAAANBJIFManpNoiGQ2ptIAA0nH1B5MQCx4bDeLNqiyla2g6AyD6cVU9JrCIVUhWZhmTmSfHaJZNWcSktj8XahIpi3Dfpu38JFg0O3n2Tqko3ck4YUrJ5+BnDvQXRcMVOrkEh1pNqGiRoRAOYa0lcWay9eIq0tJvcPfeknubHU0NySrckoEHPsaDFR4qIGSIbXvZlqWToi48X4wKlNrApOZERVBRsstF6iQ4Fy20RhdPs74I4BcC6/LH88JEQmUXpnWCeJQu4JBza0tIm1Yf1KgYguMhOESQwjYsDZ0LV0GkKYytyK1RapX0wMsDChHJUvgwhiqaBTmVEFQ7zGVxhIYVKRkjqqBWMUiAWp4tJylBi5pr94h/ZxGOn+LuSKcKEgU+QKog=";
      }
      tailf:meta-data "uncompressed_size" {
        tailf:meta-value "660";
      }
    }
  }

  container schema-metadata-Cisco-IOS-XE-environment-oper {
    description
      "Hidden internal container used for metadata";
    tailf:hidden "full";
    uses __yangpp_metadata;
  }
  container gnmi-model-data {
    description
      "This container makes accessible the information necessary to respond to a GNMI Capabilities RPC";
    tailf:hidden "full";
    tailf:meta-data "module-name" {
      tailf:meta-value "Cisco-IOS-XE-environment-oper";
    }
    tailf:meta-data "organization" {
      tailf:meta-value "Cisco Systems, Inc.";
    }
    tailf:meta-data "semver" {
      tailf:meta-value "2019-05-01";
    }
  }
}
